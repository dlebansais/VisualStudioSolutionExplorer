# version format
version: v{build}

branches:
  only:
    - master
    - deployment

# Skipping commits with particular message or from specific user
skip_commits:
  message: "*[skip ci]*"

image: Visual Studio 2022

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

environment:
  NuGetPackageSourceCredentials_github:     # value: Username=dlebansais;Password={github package token}
    secure: Fd8cbeFRzxym3D4FpbJo2m943iBsBRgrAGOEFhMHDO8fjmexYLxPFiT7r6EH/m/+gLVf7ft79axHnnaPYwiyO/VL8bwpli1lCEVaTGhPUjM=
  opencover_version: 4.7.1221
  codecov_uploader_version: 0.7.1
  report_generator_version: 5.2.0
  PACKAGE_PREFIX: dlebansais

matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.

before_build:
  - nuget restore %APPVEYOR_PROJECT_NAME%.sln
  - nuget install GitCommitId -DependencyVersion Highest -OutputDirectory packages
  - dotnet restore

configuration:
  - Release
  - Debug

build:
  project: $(APPVEYOR_PROJECT_NAME).sln

after_build:
  - nuget install Packager -DependencyVersion Highest -OutputDirectory packages # Install Packager
  - ps: $folder = Get-ChildItem -Path packages/Packager.* -Name | Out-String    # Get the installation folder (we don't know the actual version)
  - ps: $firstline = ($folder -split '\r\n')[0]                                 # Get rid of carriage-return
  - ps: $fullpath = ".\packages\$firstline\lib\net481\Packager.exe"             # Build full path
  - ps: $env:PACKAGER_PATH=$fullpath
  - '%PACKAGER_PATH% %CUSTOM_PACKAGER_OPTIONS% --prefix=%PACKAGE_PREFIX%'                  # Execute the packager: the output is nuget\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%.nuspec
  - if exist nuget\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%.nuspec nuget pack nuget\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%.nuspec
  - '%PACKAGER_PATH% %CUSTOM_PACKAGER_OPTIONS% --prefix=%PACKAGE_PREFIX% --debug'          # Execute the packager: the output is nuget-debug\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%-Debug.nuspec
  - if exist nuget-debug\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%-Debug.nuspec nuget pack nuget-debug\%PACKAGE_PREFIX%.%APPVEYOR_PROJECT_NAME%-Debug.nuspec
  - ps: $xml = [xml](Get-Content .\$env:APPVEYOR_PROJECT_NAME\$env:APPVEYOR_PROJECT_NAME.csproj)
  - ps: $version=$xml.Project.PropertyGroup.Version
  - ps: set version_tag v$version
  - ps: $version_tag=$version_tag.Trim()
  - ps: $env:VERSION_TAG=$version_tag
  - echo Version is "%VERSION_TAG%"

before_test:
  - nuget install OpenCover -Version %opencover_version% -OutputDirectory packages
  - nuget install CodecovUploader -Version %codecov_uploader_version% -OutputDirectory packages
  - nuget install ReportGenerator -Version %report_generator_version% -OutputDirectory packages
  - |-
    printf "dotnet test ./Test/%APPVEYOR_PROJECT_NAME%.Test/bin/x64/%CONFIGURATION%/net8.0/%APPVEYOR_PROJECT_NAME%.Test.dll -l console;verbosity=detailed\n" > run-tests.bat
    printf "dotnet test ./Test/%APPVEYOR_PROJECT_NAME%.Test/bin/x64/%CONFIGURATION%/net481/%APPVEYOR_PROJECT_NAME%.Test.dll -l console;verbosity=detailed\n" >> run-tests.bat
  - |-
    printf "@echo ************************************************************** Starting Tests..\n" > run-tests1.bat
    printf "call run-tests.bat\n" >> run-tests1.bat
  - |-
    printf ".\packages\OpenCover.%opencover_version%\Tools\OpenCover.Console.exe -register:user -returntargetcode -target:\x25\x31 -mergeoutput -output:""Coverage-%APPVEYOR_PROJECT_NAME%.xml""\n" > opencover.bat
  - |-
    printf ".\packages\CodecovUploader.%codecov_uploader_version%\Tools\Codecov.exe -f ""Coverage-%APPVEYOR_PROJECT_NAME%.xml""\n" > after-test.bat
    printf ".\packages\ReportGenerator.%report_generator_version%\Tools\Net8.0\ReportGenerator.exe ""-reports:Coverage-%APPVEYOR_PROJECT_NAME%.xml"" -targetdir:.\CoverageReports ""-assemblyfilters:-Microsoft*;+%APPVEYOR_PROJECT_NAME%"" ""-filefilters:-*.g.cs"" -reporttypes:textsummary\n" >> after-test.bat
    printf "powershell $summary = Get-Content .\CoverageReports\Summary.txt -Raw ; Write-Output $summary ; $pattern = 'Branch coverage' + [char]0x003A + ' 100' + [char]0x0025 ; if ($summary -NotMatch $pattern) { exit -1 }\n" >> after-test.bat
    printf "if errorlevel 0 copy .\CoverageReports\Summary.txt SummaryCopy.txt > nul\n" >> after-test.bat     # Copying file to fail if the file doesn't exist

test_script:
  - if '%APPVEYOR_REPO_BRANCH%' == 'master' call opencover.bat run-tests1.bat

after_test:
  - if '%APPVEYOR_REPO_BRANCH%' == 'master' call after-test.bat

artifacts:
  - path: $(PACKAGE_PREFIX).$(APPVEYOR_PROJECT_NAME)-Debug.*.nupkg
    name: $(APPVEYOR_PROJECT_NAME)-Package-Debug
  - path: $(PACKAGE_PREFIX).$(APPVEYOR_PROJECT_NAME).*.nupkg
    name: $(APPVEYOR_PROJECT_NAME)-Package-Release

deploy:
  - provider: GitHub
    release: $(VERSION_TAG)
    description: 'Automatic deployment'
    auth_token:
      secure: hjfTFfWeXzkCbwNb/qPmZik9szwztg8bDIxWAM70ZVhQLIIMhLXj9+zQEdovEUfk
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Release
    draft: false
    prerelease: false
    on:
      branch: deployment
      configuration: Release
  - provider: GitHub
    release: $(VERSION_TAG)
    description: 'Automatic deployment'
    auth_token:
      secure: hjfTFfWeXzkCbwNb/qPmZik9szwztg8bDIxWAM70ZVhQLIIMhLXj9+zQEdovEUfk
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Debug
    draft: false
    prerelease: false
    on:
      branch: deployment
      configuration: Debug
  - provider: NuGet
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Release
    skip_symbols: true
    api_key:
      secure: Wrt1RLR81rx4nHwWR3jbGRqiaevBfViPxp9R08sRQKTQ24v6ZOiHcNHcBKZ8do4+
    on:
      branch: deployment
      configuration: Release
  - provider: NuGet
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Debug
    symbol_server: https://api.nuget.org/v3/index.json
    api_key:
      secure: Wrt1RLR81rx4nHwWR3jbGRqiaevBfViPxp9R08sRQKTQ24v6ZOiHcNHcBKZ8do4+
    on:
      branch: deployment
      configuration: Debug
  - provider: NuGet
    server: https://nuget.pkg.github.com/dlebansais/index.json
    symbol_server: https://nuget.pkg.github.com/dlebansais/index.json
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Debug
    username: dlebansais
    api_key:
      secure: 5tcSRVegOcTQlDtIaRuucZxjxp4BmVhrdVoxJtejCcfsCmBV+ZwyfSXrlRsF9QxZ
    on:
      branch: deployment
      configuration: Debug
  - provider: NuGet
    server: https://nuget.pkg.github.com/dlebansais/index.json
    artifact: $(APPVEYOR_PROJECT_NAME)-Package-Release
    skip_symbols: true
    username: dlebansais
    api_key:
      secure: 5tcSRVegOcTQlDtIaRuucZxjxp4BmVhrdVoxJtejCcfsCmBV+ZwyfSXrlRsF9QxZ
    on:
      branch: deployment
      configuration: Release
